{"ast":null,"code":"var _jsxFileName = \"/workspaces/vehicle-price-estimate/src/context/AppContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [vehicleData, setVehicleData] = useState(null);\n  const [valuationResult, setValuationResult] = useState(null);\n  const [valuationHistory, setValuationHistory] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [error, setError] = useState(null);\n  const [uploadedImages, setUploadedImages] = useState([]);\n  const setImages = images => {\n    setUploadedImages(images);\n  };\n  const analyzeImage = async imageFile => {\n    setIsLoading(true);\n    setLoadingMessage('Estimating Vehicle Value...');\n    setError(null);\n    try {\n      // In a real app, call your API here\n      const result = {\n        make: 'Toyota',\n        model: 'Camry',\n        year: '2020',\n        mileage: '45,000',\n        condition: 'Good'\n      };\n      setVehicleData(result);\n      return result;\n    } catch (err) {\n      setError('Failed to analyze image. Please try again.');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const estimateValue = async data => {\n    setIsLoading(true);\n    setLoadingMessage('Getting Vehicle Details...');\n    setError(null);\n    try {\n      // In a real app, call your API here\n      const result = {\n        price: '$24,500',\n        breakdown: [{\n          label: 'Base Market Value',\n          value: '$26,000'\n        }, {\n          label: 'Mileage Adjustment',\n          value: '-$1,200',\n          isNegative: true\n        }, {\n          label: 'Condition Adjustment',\n          value: '-$300',\n          isNegative: true\n        }],\n        range: {\n          low: '$22,000',\n          high: '$27,000',\n          current: '$24,500'\n        }\n      };\n      setValuationResult(result);\n\n      // Add to history\n      const historyItem = {\n        id: Date.now(),\n        make: data.make,\n        model: data.model,\n        year: data.year,\n        date: new Date().toISOString().split('T')[0],\n        price: result.price,\n        image: 'car-placeholder.png'\n      };\n      setValuationHistory(prev => [historyItem, ...prev]);\n      return result;\n    } catch (err) {\n      setError('Failed to estimate value. Please try again.');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadHistory = async () => {\n    setIsLoading(true);\n    try {\n      // In a real app, call your API here\n      const history = [{\n        id: 1,\n        make: 'Toyota',\n        model: 'Camry',\n        year: '2020',\n        date: '2023-05-15',\n        price: '$24,500',\n        image: 'car-placeholder.png'\n      }, {\n        id: 2,\n        make: 'Honda',\n        model: 'Civic',\n        year: '2018',\n        date: '2023-04-22',\n        price: '$18,200',\n        image: 'car-placeholder.png'\n      }];\n      setValuationHistory(history);\n      return history;\n    } catch (err) {\n      setError('Failed to load history. Please try again.');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      vehicleData,\n      valuationResult,\n      valuationHistory,\n      isLoading,\n      error,\n      analyzeImage,\n      estimateValue,\n      loadHistory,\n      setVehicleData,\n      clearError: () => setError(null),\n      setImages,\n      uploadedImages\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"txoDmCrmermlUR/kA1fNdxDVDIk=\");\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  return useContext(AppContext);\n};\n_s2(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","vehicleData","setVehicleData","valuationResult","setValuationResult","valuationHistory","setValuationHistory","isLoading","setIsLoading","loadingMessage","setLoadingMessage","error","setError","uploadedImages","setUploadedImages","setImages","images","analyzeImage","imageFile","result","make","model","year","mileage","condition","err","estimateValue","data","price","breakdown","label","value","isNegative","range","low","high","current","historyItem","id","Date","now","date","toISOString","split","image","prev","loadHistory","history","Provider","clearError","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","$RefreshReg$"],"sources":["/workspaces/vehicle-price-estimate/src/context/AppContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\n\nconst AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n  const [vehicleData, setVehicleData] = useState(null);\n  const [valuationResult, setValuationResult] = useState(null);\n  const [valuationHistory, setValuationHistory] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [error, setError] = useState(null);\n  const [uploadedImages, setUploadedImages] = useState([]);\n\n  const setImages = (images) => {\n    setUploadedImages(images);\n  };\n\n  const analyzeImage = async (imageFile) => {\n    setIsLoading(true);\n    setLoadingMessage('Estimating Vehicle Value...');\n    setError(null);\n    try {\n      // In a real app, call your API here\n      const result = {\n        make: 'Toyota',\n        model: 'Camry',\n        year: '2020',\n        mileage: '45,000',\n        condition: 'Good'\n      };\n      setVehicleData(result);\n      return result;\n    } catch (err) {\n      setError('Failed to analyze image. Please try again.');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const estimateValue = async (data) => {\n    setIsLoading(true);\n    setLoadingMessage('Getting Vehicle Details...');\n    setError(null);\n    try {\n      // In a real app, call your API here\n      const result = {\n        price: '$24,500',\n        breakdown: [\n          { label: 'Base Market Value', value: '$26,000' },\n          { label: 'Mileage Adjustment', value: '-$1,200', isNegative: true },\n          { label: 'Condition Adjustment', value: '-$300', isNegative: true },\n        ],\n        range: {\n          low: '$22,000',\n          high: '$27,000',\n          current: '$24,500',\n        }\n      };\n      setValuationResult(result);\n      \n      // Add to history\n      const historyItem = {\n        id: Date.now(),\n        make: data.make,\n        model: data.model,\n        year: data.year,\n        date: new Date().toISOString().split('T')[0],\n        price: result.price,\n        image: 'car-placeholder.png'\n      };\n      setValuationHistory(prev => [historyItem, ...prev]);\n      \n      return result;\n    } catch (err) {\n      setError('Failed to estimate value. Please try again.');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadHistory = async () => {\n    setIsLoading(true);\n    try {\n      // In a real app, call your API here\n      const history = [\n        {\n          id: 1,\n          make: 'Toyota',\n          model: 'Camry',\n          year: '2020',\n          date: '2023-05-15',\n          price: '$24,500',\n          image: 'car-placeholder.png',\n        },\n        {\n          id: 2,\n          make: 'Honda',\n          model: 'Civic',\n          year: '2018',\n          date: '2023-04-22',\n          price: '$18,200',\n          image: 'car-placeholder.png',\n        },\n      ];\n      setValuationHistory(history);\n      return history;\n    } catch (err) {\n      setError('Failed to load history. Please try again.');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        vehicleData,\n        valuationResult,\n        valuationHistory,\n        isLoading,\n        error,\n        analyzeImage,\n        estimateValue,\n        loadHistory,\n        setVehicleData,\n        clearError: () => setError(null),\n        setImages,\n        uploadedImages\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => useContext(AppContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}